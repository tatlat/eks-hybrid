apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.1
  creationTimestamp: null
  name: awspcaclusterissuers.awspca.cert-manager.io
spec:
  group: awspca.cert-manager.io
  names:
    kind: AWSPCAClusterIssuer
    listKind: AWSPCAClusterIssuerList
    plural: awspcaclusterissuers
    singular: awspcaclusterissuer
  scope: Cluster
  versions:
    - name: v1beta1
      schema:
        openAPIV3Schema:
          description:
            AWSPCAClusterIssuer is the Schema for the awspcaclusterissuers
            API
          properties:
            apiVersion:
              description:
                "APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
              type: string
            kind:
              description:
                "Kind is a string value representing the REST resource this
                object represents. Servers may infer this from the endpoint the client
                submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
              type: string
            metadata:
              type: object
            spec:
              description: AWSPCAIssuerSpec defines the desired state of AWSPCAIssuer
              properties:
                arn:
                  description: Specifies the ARN of the PCA resource
                  type: string
                region:
                  description: Should contain the AWS region if it cannot be inferred
                  type: string
                secretRef:
                  description:
                    Needs to be specified if you want to authorize with AWS
                    using an access and secret key
                  properties:
                    accessKeyIDSelector:
                      description:
                        Specifies the secret key where the AWS Access Key
                        ID exists
                      properties:
                        key:
                          description:
                            The key of the secret to select from.  Must be
                            a valid secret key.
                          type: string
                        name:
                          description:
                            "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                            TODO: Add other useful fields. apiVersion, kind, uid?"
                          type: string
                        optional:
                          description:
                            Specify whether the Secret or its key must be
                            defined
                          type: boolean
                      required:
                        - key
                      type: object
                    name:
                      description:
                        Name is unique within a namespace to reference a
                        secret resource.
                      type: string
                    namespace:
                      description:
                        Namespace defines the space within which the secret
                        name must be unique.
                      type: string
                    secretAccessKeySelector:
                      description:
                        Specifies the secret key where the AWS Secret Access
                        Key exists
                      properties:
                        key:
                          description:
                            The key of the secret to select from.  Must be
                            a valid secret key.
                          type: string
                        name:
                          description:
                            "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                            TODO: Add other useful fields. apiVersion, kind, uid?"
                          type: string
                        optional:
                          description:
                            Specify whether the Secret or its key must be
                            defined
                          type: boolean
                      required:
                        - key
                      type: object
                  type: object
              type: object
            status:
              description: AWSPCAIssuerStatus defines the observed state of AWSPCAIssuer
              properties:
                conditions:
                  items:
                    description:
                      "Condition contains details for one aspect of the current
                      state of this API Resource. --- This struct is intended for direct
                      use as an array at the field path .status.conditions.  For example,
                      type FooStatus struct{     // Represents the observations of a
                      foo's current state.     // Known .status.conditions.type are:
                      \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type
                      \    // +patchStrategy=merge     // +listType=map     // +listMapKey=type
                      \    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                      patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`
                      \n     // other fields }"
                    properties:
                      lastTransitionTime:
                        description:
                          lastTransitionTime is the last time the condition
                          transitioned from one status to another. This should be when
                          the underlying condition changed.  If that is not known, then
                          using the time when the API field changed is acceptable.
                        format: date-time
                        type: string
                      message:
                        description:
                          message is a human readable message indicating
                          details about the transition. This may be an empty string.
                        maxLength: 32768
                        type: string
                      observedGeneration:
                        description:
                          observedGeneration represents the .metadata.generation
                          that the condition was set based upon. For instance, if .metadata.generation
                          is currently 12, but the .status.conditions[x].observedGeneration
                          is 9, the condition is out of date with respect to the current
                          state of the instance.
                        format: int64
                        minimum: 0
                        type: integer
                      reason:
                        description:
                          reason contains a programmatic identifier indicating
                          the reason for the condition's last transition. Producers
                          of specific condition types may define expected values and
                          meanings for this field, and whether the values are considered
                          a guaranteed API. The value should be a CamelCase string.
                          This field may not be empty.
                        maxLength: 1024
                        minLength: 1
                        pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                        type: string
                      status:
                        description: status of the condition, one of True, False, Unknown.
                        enum:
                          - "True"
                          - "False"
                          - Unknown
                        type: string
                      type:
                        description:
                          type of condition in CamelCase or in foo.example.com/CamelCase.
                          --- Many .condition.type values are consistent across resources
                          like Available, but because arbitrary conditions can be useful
                          (see .node.status.conditions), the ability to deconflict is
                          important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                        maxLength: 316
                        pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                        type: string
                    required:
                      - lastTransitionTime
                      - message
                      - reason
                      - status
                      - type
                    type: object
                  type: array
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
# Source: aws-privateca-issuer/crds/awspca.cert-manager.io_awspcaissuers.yaml
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.1
  creationTimestamp: null
  name: awspcaissuers.awspca.cert-manager.io
spec:
  group: awspca.cert-manager.io
  names:
    kind: AWSPCAIssuer
    listKind: AWSPCAIssuerList
    plural: awspcaissuers
    singular: awspcaissuer
  scope: Namespaced
  versions:
    - name: v1beta1
      schema:
        openAPIV3Schema:
          description: AWSPCAIssuer is the Schema for the awspcaissuers API
          properties:
            apiVersion:
              description:
                "APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
              type: string
            kind:
              description:
                "Kind is a string value representing the REST resource this
                object represents. Servers may infer this from the endpoint the client
                submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
              type: string
            metadata:
              type: object
            spec:
              description: AWSPCAIssuerSpec defines the desired state of AWSPCAIssuer
              properties:
                arn:
                  description: Specifies the ARN of the PCA resource
                  type: string
                region:
                  description: Should contain the AWS region if it cannot be inferred
                  type: string
                secretRef:
                  description:
                    Needs to be specified if you want to authorize with AWS
                    using an access and secret key
                  properties:
                    accessKeyIDSelector:
                      description:
                        Specifies the secret key where the AWS Access Key
                        ID exists
                      properties:
                        key:
                          description:
                            The key of the secret to select from.  Must be
                            a valid secret key.
                          type: string
                        name:
                          description:
                            "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                            TODO: Add other useful fields. apiVersion, kind, uid?"
                          type: string
                        optional:
                          description:
                            Specify whether the Secret or its key must be
                            defined
                          type: boolean
                      required:
                        - key
                      type: object
                    name:
                      description:
                        Name is unique within a namespace to reference a
                        secret resource.
                      type: string
                    namespace:
                      description:
                        Namespace defines the space within which the secret
                        name must be unique.
                      type: string
                    secretAccessKeySelector:
                      description:
                        Specifies the secret key where the AWS Secret Access
                        Key exists
                      properties:
                        key:
                          description:
                            The key of the secret to select from.  Must be
                            a valid secret key.
                          type: string
                        name:
                          description:
                            "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                            TODO: Add other useful fields. apiVersion, kind, uid?"
                          type: string
                        optional:
                          description:
                            Specify whether the Secret or its key must be
                            defined
                          type: boolean
                      required:
                        - key
                      type: object
                  type: object
              type: object
            status:
              description: AWSPCAIssuerStatus defines the observed state of AWSPCAIssuer
              properties:
                conditions:
                  items:
                    description:
                      "Condition contains details for one aspect of the current
                      state of this API Resource. --- This struct is intended for direct
                      use as an array at the field path .status.conditions.  For example,
                      type FooStatus struct{     // Represents the observations of a
                      foo's current state.     // Known .status.conditions.type are:
                      \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type
                      \    // +patchStrategy=merge     // +listType=map     // +listMapKey=type
                      \    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                      patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`
                      \n     // other fields }"
                    properties:
                      lastTransitionTime:
                        description:
                          lastTransitionTime is the last time the condition
                          transitioned from one status to another. This should be when
                          the underlying condition changed.  If that is not known, then
                          using the time when the API field changed is acceptable.
                        format: date-time
                        type: string
                      message:
                        description:
                          message is a human readable message indicating
                          details about the transition. This may be an empty string.
                        maxLength: 32768
                        type: string
                      observedGeneration:
                        description:
                          observedGeneration represents the .metadata.generation
                          that the condition was set based upon. For instance, if .metadata.generation
                          is currently 12, but the .status.conditions[x].observedGeneration
                          is 9, the condition is out of date with respect to the current
                          state of the instance.
                        format: int64
                        minimum: 0
                        type: integer
                      reason:
                        description:
                          reason contains a programmatic identifier indicating
                          the reason for the condition's last transition. Producers
                          of specific condition types may define expected values and
                          meanings for this field, and whether the values are considered
                          a guaranteed API. The value should be a CamelCase string.
                          This field may not be empty.
                        maxLength: 1024
                        minLength: 1
                        pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                        type: string
                      status:
                        description: status of the condition, one of True, False, Unknown.
                        enum:
                          - "True"
                          - "False"
                          - Unknown
                        type: string
                      type:
                        description:
                          type of condition in CamelCase or in foo.example.com/CamelCase.
                          --- Many .condition.type values are consistent across resources
                          like Available, but because arbitrary conditions can be useful
                          (see .node.status.conditions), the ability to deconflict is
                          important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                        maxLength: 316
                        pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                        type: string
                    required:
                      - lastTransitionTime
                      - message
                      - reason
                      - status
                      - type
                    type: object
                  type: array
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: aws-privateca-issuer/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: aws-privateca-issuer
  labels:
    app.kubernetes.io/name: aws-privateca-issuer
    app.kubernetes.io/instance: aws-privateca-issuer
    app.kubernetes.io/version: "v1.5.0"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - ""
      - coordination.k8s.io
    resources:
      - configmaps
      - leases
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - awspca.cert-manager.io
    resources:
      - awspcaclusterissuers
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - awspca.cert-manager.io
    resources:
      - awspcaclusterissuers/finalizers
    verbs:
      - update
  - apiGroups:
      - awspca.cert-manager.io
    resources:
      - awspcaclusterissuers/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - awspca.cert-manager.io
    resources:
      - awspcaissuers
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - awspca.cert-manager.io
    resources:
      - awspcaissuers/finalizers
    verbs:
      - update
  - apiGroups:
      - awspca.cert-manager.io
    resources:
      - awspcaissuers/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - cert-manager.io
    resources:
      - certificaterequests
    verbs:
      - get
      - list
      - update
      - watch
  - apiGroups:
      - cert-manager.io
    resources:
      - certificaterequests/status
    verbs:
      - get
      - patch
      - update
---
# Source: aws-privateca-issuer/templates/rbac.yaml
# permissions to approve all awspca.cert-manager.io requests
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cert-manager-controller-approve:awspca-cert-manager-io
  labels:
    app.kubernetes.io/name: aws-privateca-issuer
    app.kubernetes.io/instance: aws-privateca-issuer
    app.kubernetes.io/version: "v1.5.0"
rules:
  - apiGroups:
      - cert-manager.io
    resources:
      - signers
    verbs:
      - approve
    resourceNames:
      - awspcaclusterissuers.awspca.cert-manager.io/*
      - awspcaissuers.awspca.cert-manager.io/*
---
# Source: aws-privateca-issuer/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: aws-privateca-issuer
  labels:
    app.kubernetes.io/name: aws-privateca-issuer
    app.kubernetes.io/instance: aws-privateca-issuer
    app.kubernetes.io/version: "v1.5.0"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: aws-privateca-issuer
subjects:
  - kind: ServiceAccount
    name: aws-privateca-issuer
    namespace: default
---
# Source: aws-privateca-issuer/templates/rbac.yaml
# bind the approver ServiceAccount to approve all awspca.cert-manager.io
# CertificateRequests
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cert-manager-controller-approve:awspca-cert-manager-io
  labels:
    app.kubernetes.io/name: aws-privateca-issuer
    app.kubernetes.io/instance: aws-privateca-issuer
    app.kubernetes.io/version: "v1.5.0"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cert-manager-controller-approve:awspca-cert-manager-io
subjects:
  - kind: ServiceAccount
    name: cert-manager
    namespace: cert-manager
---
# Source: aws-privateca-issuer/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: aws-privateca-issuer
  namespace: default
  labels:
    app.kubernetes.io/name: aws-privateca-issuer
    app.kubernetes.io/instance: aws-privateca-issuer
    app.kubernetes.io/version: "v1.5.0"
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: aws-privateca-issuer
    app.kubernetes.io/instance: aws-privateca-issuer
---
# Source: aws-privateca-issuer/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: aws-privateca-issuer
  namespace: default
  labels:
    app.kubernetes.io/name: aws-privateca-issuer
    app.kubernetes.io/instance: aws-privateca-issuer
    app.kubernetes.io/version: "v1.5.0"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: aws-privateca-issuer
      app.kubernetes.io/instance: aws-privateca-issuer
  template:
    metadata:
      labels:
        app.kubernetes.io/name: aws-privateca-issuer
        app.kubernetes.io/instance: aws-privateca-issuer
    spec:
      serviceAccountName: aws-privateca-issuer
      securityContext:
        runAsUser: 65532
      containers:
        - name: aws-privateca-issuer
          securityContext:
            allowPrivilegeEscalation: false
          image: "public.ecr.aws/k1n1h4h4/cert-manager-aws-privateca-issuer:v1.5.0"
          imagePullPolicy: IfNotPresent
          command:
            - /manager
          args:
            - --leader-elect
          ports:
            - containerPort: 8080
              name: http
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8081
            initialDelaySeconds: 15
            periodSeconds: 20
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8081
            initialDelaySeconds: 5
            periodSeconds: 10
          resources:
            limits:
              cpu: 50m
              memory: 64Mi
            requests:
              cpu: 50m
              memory: 64Mi
