AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to create IAM roles and an EC2 instance with customizable volume size.

Parameters:
  caBundleCert:
    Type: String
  clusterArn:
    Type: String
    Description: The ARN of the EKS cluster to restrict access.
  clusterName:
    Type: String
    Description: The name of the EKS cluster.
  rolePathPrefix:
    Type: String
    Description: The path prefix for the IAM roles.
  SSMRolePrefix:
    Type: String
    Default: 'ssm'
  IRARolePrefix:
    Type: String
    Default: 'ira'
 
    
Resources:
  SSMRole:
    Type: AWS::IAM::Role
    Properties:
      # use a predictable prefix for SSM role while maintaining uniqueness requirement for SSM role name
      RoleName:
        !Sub
          - '${RolePrefix}-${TrimmedRegion}${UUID}'
          - RolePrefix: !Ref SSMRolePrefix
            TrimmedRegion: !Join ['', !Split ['-', !Ref AWS::Region]]
            UUID: !Join ['', !Split ['-', !Select [2, !Split [/, !Ref AWS::StackId]]]]
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ssm.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SSMRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: AllowDeregisterOwnInstance
                Effect: Allow
                Action:
                  - ssm:DeregisterManagedInstance
                Resource: 'arn:aws:ssm:*:*:managed-instance/*'
                Condition:
                  ArnLike:
                    'ssm:SourceInstanceARN': 'arn:aws:ssm:*:*:managed-instance/*'
              - Sid: AllowDescribeInstances
                Effect: Allow
                Action:
                  - ssm:DescribeInstanceInformation
                Resource: '*'
                Condition:
                  ArnLike:
                    'ssm:SourceInstanceARN': 'arn:aws:ssm:*:*:managed-instance/*'
        - PolicyName: EKSDescribeCluster
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - eks:DescribeCluster
                Resource: !Ref clusterArn
        - PolicyName: pca-issuer-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - acm-pca:IssueCertificate
                  - acm-pca:GetCertificate
                  - acm-pca:DescribeCertificateAuthority
                Resource:
                  - !Sub arn:aws:acm-pca:${AWS::Region}:${AWS::AccountId}:certificate-authority/*
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPullOnly
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodeMinimalPolicy
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}'
      Path: !Ref rolePathPrefix

{{- if .IncludeRolesAnywhere}}
  TrustAnchor:
    Type: AWS::RolesAnywhere::TrustAnchor
    Properties:
      Enabled: true
      Name: !Sub '${AWS::StackName}-ira-ca'
      Source:
        SourceType: CERTIFICATE_BUNDLE
        SourceData:
          X509CertificateData: !Ref caBundleCert

  AnywhereProfile:
    Type: AWS::RolesAnywhere::Profile
    Properties:
      Enabled: true
      Name: !Sub '${AWS::StackName}-ira'
      RoleArns:
        - !GetAtt IRARole.Arn
      AcceptRoleSessionName: true
    DependsOn:
      - IRARole

  IRARole:
    Type: AWS::IAM::Role
    Properties:
      # use a predictable prefix for IRA role while maintaining uniqueness requirement for IRA role name
      RoleName:
        !Sub
          - '${RolePrefix}-${TrimmedRegion}${UUID}'
          - RolePrefix: !Ref IRARolePrefix
            TrimmedRegion: !Join ['', !Split ['-', !Ref AWS::Region]]
            UUID: !Join ['', !Split ['-', !Select [2, !Split [/, !Ref AWS::StackId]]]]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPullOnly
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodeMinimalPolicy
      Policies:
        - PolicyName: EKSDescribeCluster
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - eks:DescribeCluster
              Resource: !Ref clusterArn
        - PolicyName: pca-issuer-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - acm-pca:IssueCertificate
                  - acm-pca:GetCertificate
                  - acm-pca:DescribeCertificateAuthority
                Resource:
                  - !Sub arn:aws:acm-pca:${AWS::Region}:${AWS::AccountId}:certificate-authority/*
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - rolesanywhere.amazonaws.com
            Action:
              - sts:TagSession
              - sts:SetSourceIdentity
            Condition:
              ArnEquals:
                'aws:SourceArn': !GetAtt TrustAnchor.TrustAnchorArn
          - Effect: Allow
            Principal:
              Service:
                - rolesanywhere.amazonaws.com
            Action:
              - sts:AssumeRole
            Condition:
              StringEquals:
                'sts:RoleSessionName': '${aws:PrincipalTag/x509Subject/CN}'
              ArnEquals:
                'aws:SourceArn': !GetAtt TrustAnchor.TrustAnchorArn
      Path: !Ref rolePathPrefix
    DependsOn:
    - TrustAnchor

{{- end}}


  # Create IAM Role for EC2
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      # use a predictable prefix for EC2 role while maintaining uniqueness requirement for EC2 role name
      RoleName:
        Fn::Join:
        - '-'
        - - 'ec2-role'
          - !Ref AWS::AccountId
          - !Ref AWS::Region
          - Fn::Select:
            - 0
            - Fn::Split:
              - '-'
              - Fn::Select:
                - 2
                - Fn::Split:
                  - /
                  - !Ref AWS::StackId
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Path: !Ref rolePathPrefix

Outputs:
  EC2Role:
    Description: The name of the IAM Role for EC2.
    Value: !Ref EC2Role

  SSMNodeRoleName:
    Description: The name of the IAM Role for SSM.
    Value: !Ref SSMRole

  SSMNodeRoleARN:
    Description: The ARN of the IAM Role for SSM.
    Value: !GetAtt SSMRole.Arn
{{- if .IncludeRolesAnywhere}}
  IRANodeRoleName:
    Description: IAM Role for IAM Roles Anywhere
    Value: !Ref IRARole

  IRANodeRoleARN:
    Description: ARN of the EKS Hybrid IRA Role
    Value: !GetAtt IRARole.Arn

  IRATrustAnchorARN:
    Description: ARN of the EKS Hybrid IRA Trust Anchor
    Value: !GetAtt TrustAnchor.TrustAnchorArn

  IRAProfileARN:
    Description: ARN of the EKS Hybrid IRA Profile
    Value: !GetAtt AnywhereProfile.ProfileArn
{{- end}}
